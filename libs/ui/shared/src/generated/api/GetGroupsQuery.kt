//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package api

import api.adapter.GetGroupsQuery_ResponseAdapter
import api.adapter.GetGroupsQuery_VariablesAdapter
import api.selections.GetGroupsQuerySelections
import api.type.QueryBuilder
import api.type.__CustomScalarAdapters
import api.type.__Schema
import api.type.buildQuery
import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.DefaultFakeResolver
import com.apollographql.apollo3.api.FakeResolver
import com.apollographql.apollo3.api.GlobalBuilder
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.buildData
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class GetGroupsQuery(
  public val first: Int?,
  public val last: Int?,
  public val before: String?,
  public val after: String?,
) : Query<GetGroupsQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    GetGroupsQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = GetGroupsQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = api.type.Query.type
  )
  .selections(selections = GetGroupsQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(GetGroupsQuery_ResponseAdapter.Data::class)
  public data class Data(
    /**
     * Get all groups.
     */
    public val groups: Groups,
  ) : Query.Data

  public data class Groups(
    public val pageInfo: PageInfo,
    public val edges: List<Edge?>,
  ) {
    public fun edgesFilterNotNull(): List<Edge> = edges.filterNotNull()
  }

  public data class PageInfo(
    public val __typename: String,
    /**
     * Synthetic field for 'PageInfo'
     */
    public val pageInfo: api.fragment.PageInfo,
  )

  public data class Edge(
    public val cursor: String,
    public val node: Node,
  )

  public data class Node(
    /**
     * The unique identifier of the group.
     */
    public val id: String?,
    /**
     * The name of the group.
     */
    public val name: String,
    /**
     * The description of the group.
     */
    public val description: String?,
    /**
     * The users associated with the group.
     */
    public val users: List<User>,
    /**
     * The roles associated with the group.
     */
    public val roles: List<Role>,
    /**
     * The permissions associated with the group.
     */
    public val permissions: List<Permission>,
  )

  public data class User(
    public val __typename: String,
    /**
     * Synthetic field for 'User'
     */
    public val user: api.fragment.User,
  )

  public data class Role(
    public val __typename: String,
    /**
     * Synthetic field for 'Role'
     */
    public val role: api.fragment.Role,
  )

  public data class Permission(
    public val __typename: String,
    /**
     * Synthetic field for 'Permission'
     */
    public val permission: api.fragment.Permission,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "cad0849a02f65d63402054c704412352139d3c0c77281049da10741e7b432da4"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query GetGroups($first: Int, $last: Int, $before: String, $after: String) {
     *   groups(first: $first, last: $last, before: $before, after: $after) {
     *     pageInfo {
     *       __typename
     *       ...PageInfo
     *     }
     *     edges {
     *       cursor
     *       node {
     *         id
     *         name
     *         description
     *         users {
     *           __typename
     *           ...User
     *         }
     *         roles {
     *           __typename
     *           ...Role
     *         }
     *         permissions {
     *           __typename
     *           ...Permission
     *         }
     *       }
     *     }
     *   }
     * }
     *
     * fragment PageInfo on PageInfo {
     *   startCursor
     *   endCursor
     *   hasPreviousPage
     *   hasNextPage
     * }
     *
     * fragment User on User {
     *   id
     *   username
     *   email
     *   avatar
     * }
     *
     * fragment Role on Role {
     *   id
     *   name
     *   description
     * }
     *
     * fragment Permission on Permission {
     *   id
     *   name
     *   description
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query GetGroups(${'$'}first: Int, ${'$'}last: Int, ${'$'}before: String, ${'$'}after: String) { groups(first: ${'$'}first, last: ${'$'}last, before: ${'$'}before, after: ${'$'}after) { pageInfo { __typename ...PageInfo } edges { cursor node { id name description users { __typename ...User } roles { __typename ...Role } permissions { __typename ...Permission } } } } }  fragment PageInfo on PageInfo { startCursor endCursor hasPreviousPage hasNextPage }  fragment User on User { id username email avatar }  fragment Role on Role { id name description }  fragment Permission on Permission { id name description }"

    public const val OPERATION_NAME: String = "GetGroups"

    public fun Data(resolver: FakeResolver = DefaultFakeResolver(__Schema.all),
        block: QueryBuilder.() -> Unit = {}): Data = buildData(
      GetGroupsQuery_ResponseAdapter.Data,
      GetGroupsQuerySelections.__root,
      "Query",
      GlobalBuilder.buildQuery(block),
      resolver,
      __CustomScalarAdapters,
    )
  }
}
