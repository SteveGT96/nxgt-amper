//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package api

import api.adapter.GetPermissionsQuery_ResponseAdapter
import api.adapter.GetPermissionsQuery_VariablesAdapter
import api.selections.GetPermissionsQuerySelections
import api.type.QueryBuilder
import api.type.__CustomScalarAdapters
import api.type.__Schema
import api.type.buildQuery
import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.DefaultFakeResolver
import com.apollographql.apollo3.api.FakeResolver
import com.apollographql.apollo3.api.GlobalBuilder
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.buildData
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class GetPermissionsQuery(
  public val first: Int?,
  public val last: Int?,
  public val before: String?,
  public val after: String?,
) : Query<GetPermissionsQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    GetPermissionsQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = GetPermissionsQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = api.type.Query.type
  )
  .selections(selections = GetPermissionsQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(GetPermissionsQuery_ResponseAdapter.Data::class)
  public data class Data(
    /**
     * Get all permissions.
     */
    public val permissions: Permissions,
  ) : Query.Data

  public data class Permissions(
    public val pageInfo: PageInfo,
    public val edges: List<Edge?>,
  ) {
    public fun edgesFilterNotNull(): List<Edge> = edges.filterNotNull()
  }

  public data class PageInfo(
    public val __typename: String,
    /**
     * Synthetic field for 'PageInfo'
     */
    public val pageInfo: api.fragment.PageInfo,
  )

  public data class Edge(
    public val cursor: String,
    public val node: Node,
  )

  public data class Node(
    /**
     * The unique identifier of the permission.
     */
    public val id: String?,
    /**
     * The name of the permission.
     */
    public val name: String,
    /**
     * The description of the permission.
     */
    public val description: String?,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "81d1282ffad92a57dfd8eb0ac1de47f13b83f32255398f475575f587f0f2d896"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query GetPermissions($first: Int, $last: Int, $before: String, $after: String) {
     *   permissions(first: $first, last: $last, before: $before, after: $after) {
     *     pageInfo {
     *       __typename
     *       ...PageInfo
     *     }
     *     edges {
     *       cursor
     *       node {
     *         id
     *         name
     *         description
     *       }
     *     }
     *   }
     * }
     *
     * fragment PageInfo on PageInfo {
     *   startCursor
     *   endCursor
     *   hasPreviousPage
     *   hasNextPage
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query GetPermissions(${'$'}first: Int, ${'$'}last: Int, ${'$'}before: String, ${'$'}after: String) { permissions(first: ${'$'}first, last: ${'$'}last, before: ${'$'}before, after: ${'$'}after) { pageInfo { __typename ...PageInfo } edges { cursor node { id name description } } } }  fragment PageInfo on PageInfo { startCursor endCursor hasPreviousPage hasNextPage }"

    public const val OPERATION_NAME: String = "GetPermissions"

    public fun Data(resolver: FakeResolver = DefaultFakeResolver(__Schema.all),
        block: QueryBuilder.() -> Unit = {}): Data = buildData(
      GetPermissionsQuery_ResponseAdapter.Data,
      GetPermissionsQuerySelections.__root,
      "Query",
      GlobalBuilder.buildQuery(block),
      resolver,
      __CustomScalarAdapters,
    )
  }
}
