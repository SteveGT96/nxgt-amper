//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package api

import api.adapter.WatchRoleChangeSubscription_ResponseAdapter
import api.selections.WatchRoleChangeSubscriptionSelections
import api.type.EventType
import api.type.SubscriptionBuilder
import api.type.__CustomScalarAdapters
import api.type.__Schema
import api.type.buildSubscription
import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.DefaultFakeResolver
import com.apollographql.apollo3.api.FakeResolver
import com.apollographql.apollo3.api.GlobalBuilder
import com.apollographql.apollo3.api.Subscription
import com.apollographql.apollo3.api.buildData
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public class WatchRoleChangeSubscription() : Subscription<WatchRoleChangeSubscription.Data> {
  public override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  public override fun hashCode(): Int = this::class.hashCode()

  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    // This operation doesn't have any variable
  }

  public override fun adapter(): Adapter<Data> =
      WatchRoleChangeSubscription_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = api.type.Subscription.type
  )
  .selections(selections = WatchRoleChangeSubscriptionSelections.__root)
  .build()

  @ApolloAdaptableWith(WatchRoleChangeSubscription_ResponseAdapter.Data::class)
  public data class Data(
    /**
     * Subscribe to role changes
     */
    public val onRoleChange: OnRoleChange,
  ) : Subscription.Data

  public data class OnRoleChange(
    /**
     * The type of event.
     */
    public val type: EventType,
    /**
     * The role data associated with the event.
     */
    public val `data`: Data1,
  )

  public data class Data1(
    /**
     * The unique identifier of the role.
     */
    public val id: String?,
    /**
     * The name of the role.
     */
    public val name: String,
    /**
     * The description of the role.
     */
    public val description: String?,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "d4b6a4c1cf8530b0d743e2984e9169366868526f46a014bb3d7e42e75333f127"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * subscription WatchRoleChange {
     *   onRoleChange {
     *     type
     *     data {
     *       id
     *       name
     *       description
     *     }
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() = "subscription WatchRoleChange { onRoleChange { type data { id name description } } }"

    public const val OPERATION_NAME: String = "WatchRoleChange"

    public fun Data(resolver: FakeResolver = DefaultFakeResolver(__Schema.all),
        block: SubscriptionBuilder.() -> Unit = {}): Data = buildData(
      WatchRoleChangeSubscription_ResponseAdapter.Data,
      WatchRoleChangeSubscriptionSelections.__root,
      "Subscription",
      GlobalBuilder.buildSubscription(block),
      resolver,
      __CustomScalarAdapters,
    )
  }
}
