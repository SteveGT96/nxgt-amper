//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package api.adapter

import api.GetGroupByIdQuery
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object GetGroupByIdQuery_ResponseAdapter {
  public object Data : Adapter<GetGroupByIdQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("group")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetGroupByIdQuery.Data {
      var _group: GetGroupByIdQuery.Group? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _group = Group.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetGroupByIdQuery.Data(
        group = _group!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetGroupByIdQuery.Data,
    ): Unit {
      writer.name("group")
      Group.obj().toJson(writer, customScalarAdapters, value.group)
    }
  }

  public object Group : Adapter<GetGroupByIdQuery.Group> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "name", "description", "users", "roles",
        "permissions")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetGroupByIdQuery.Group {
      var _id: String? = null
      var _name: String? = null
      var _description: String? = null
      var _users: List<GetGroupByIdQuery.User>? = null
      var _roles: List<GetGroupByIdQuery.Role>? = null
      var _permissions: List<GetGroupByIdQuery.Permission>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _description = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _users = User.obj(true).list().fromJson(reader, customScalarAdapters)
          4 -> _roles = Role.obj(true).list().fromJson(reader, customScalarAdapters)
          5 -> _permissions = Permission.obj(true).list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetGroupByIdQuery.Group(
        id = _id,
        name = _name!!,
        description = _description,
        users = _users!!,
        roles = _roles!!,
        permissions = _permissions!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetGroupByIdQuery.Group,
    ): Unit {
      writer.name("id")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("description")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.description)

      writer.name("users")
      User.obj(true).list().toJson(writer, customScalarAdapters, value.users)

      writer.name("roles")
      Role.obj(true).list().toJson(writer, customScalarAdapters, value.roles)

      writer.name("permissions")
      Permission.obj(true).list().toJson(writer, customScalarAdapters, value.permissions)
    }
  }

  public object User : Adapter<GetGroupByIdQuery.User> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetGroupByIdQuery.User {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _user = api.fragment.UserImpl_ResponseAdapter.User.fromJson(reader, customScalarAdapters)

      return GetGroupByIdQuery.User(
        __typename = __typename!!,
        user = _user
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetGroupByIdQuery.User,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      api.fragment.UserImpl_ResponseAdapter.User.toJson(writer, customScalarAdapters, value.user)
    }
  }

  public object Role : Adapter<GetGroupByIdQuery.Role> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetGroupByIdQuery.Role {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _role = api.fragment.RoleImpl_ResponseAdapter.Role.fromJson(reader, customScalarAdapters)

      return GetGroupByIdQuery.Role(
        __typename = __typename!!,
        role = _role
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetGroupByIdQuery.Role,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      api.fragment.RoleImpl_ResponseAdapter.Role.toJson(writer, customScalarAdapters, value.role)
    }
  }

  public object Permission : Adapter<GetGroupByIdQuery.Permission> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetGroupByIdQuery.Permission {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _permission = api.fragment.PermissionImpl_ResponseAdapter.Permission.fromJson(reader,
          customScalarAdapters)

      return GetGroupByIdQuery.Permission(
        __typename = __typename!!,
        permission = _permission
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetGroupByIdQuery.Permission,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      api.fragment.PermissionImpl_ResponseAdapter.Permission.toJson(writer, customScalarAdapters,
          value.permission)
    }
  }
}
